
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int [] ans = new int[n-k+1];
        int r=0;
        int i=0;
        int j=0;
        Deque<Integer> q = new ArrayDeque<>();
              while(j<n){
            //CALCULATION:-
            
            
            while(!q.isEmpty() && q.peekLast() < nums[j]){
                q.pollLast();
            }
            q.offer(nums[j]);
            
            if(j-i+1<k){
                j++;
            } else if(j-i+1==k){
                ans[r++] = q.peek();
                if(q.peek() == nums[i]){
                    q.pollFirst();
                }
                i++;j++;
            }
        }
        return ans;
    }
}

TIME COMPLEXITY:-O(N);
SPACE COMPLEXITY :- (K);
