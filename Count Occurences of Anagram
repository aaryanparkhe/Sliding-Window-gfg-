class Solution {

    int search(String pat, String txt) {
        // code here
        Map<Character,Integer> mp = new HashMap<>();
        
        for(int l=0;l<pat.length();l++){
            mp.put(pat.charAt(l),mp.getOrDefault(pat.charAt(l),0)+1);
        }
        
        int i=0 ;
        int j=0;
        int ans = 0;
        int count = mp.size();
        int N = txt.length();
        int M = pat.length();
        
        while(j<N){
            char ch = txt.charAt(j);
            if(mp.containsKey(ch)){
                mp.replace(ch,mp.get(ch)-1);
                
                if(mp.get(ch)==0){
                    count--;
                }
            }
            
            if(j-i+1 < M){
                j++;
            } else if(j-i+1 == M){
                if(count==0){
                    ans++;
                }
                char tmp = txt.charAt(i);
                if(mp.containsKey(tmp)){
                    if(mp.get(tmp)==0) count++;
                    
                    mp.replace(tmp,mp.get(tmp)+1);
                    i++;
                    j++;
                } else {
                    i++;
                    j++;
                }
            }
        }
        return ans;
    }
}


 Time Complexity: O(N)
 Auxiliary Space: O(26)
